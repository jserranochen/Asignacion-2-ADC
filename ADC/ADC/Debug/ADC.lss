
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000062c  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000550  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000292  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	4b c0       	rjmp	.+150    	; 0xdc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
1 MHz   8 (125kHz), 16 (62.5kHz)
20 mhZ 128 (156.25 kHz)
*/
int main(void)
{
	DDRB |= (1<<PORTB6)|(1<<PORTB3) |(1<<PORTB4);   //Set the Data Direction Register to output (PB3 = yellow led , PB6 = green led)
  48:	87 b3       	in	r24, 0x17	; 23
  4a:	88 65       	ori	r24, 0x58	; 88
  4c:	87 bb       	out	0x17, r24	; 23
	DDRA &= ~(1<<PORTA4);	//Set the Data Direction Register for the POT to input
  4e:	d4 98       	cbi	0x1a, 4	; 26
	
	ADMUX =
  50:	83 e0       	ldi	r24, 0x03	; 3
  52:	87 b9       	out	0x07, r24	; 7
	(0 << REFS1) |  (0 << REFS0) |   // Sets ref. voltage to VCC
	(0 << ADLAR) |				   // 0: right adjust, 1: left adjust
	(0 << MUX4) | (0 << MUX3) | (0 << MUX2)  |	(1 << MUX1)  |	(1 << MUX0);   //  MUX bits ADC1; 0010, PA1
	
	
	ADCSRA =
  54:	87 e8       	ldi	r24, 0x87	; 135
  56:	86 b9       	out	0x06, r24	; 6
	(0 << ADATE)  |     // DISABLED Auto trigger
	(0 << ADIF)  |     //
	(0 << ADIE)  |     // DISABLED ADC interrupt flag
	(1 << ADPS2) | (1 << ADPS1) |  (1 << ADPS0);  // set prescaler to 128
	
	ADCSRB =
  58:	13 b8       	out	0x03, r1	; 3
	(0<<ADTS1)|		//Free running mode bit 1
	(0<<ADTS0);		//Free running mode bit 0
	
	while (1)
	{
		ADCSRA |= (1 << ADSC);         // start ADC measurement
  5a:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
  5c:	36 99       	sbic	0x06, 6	; 6
  5e:	fe cf       	rjmp	.-4      	; 0x5c <main+0x14>
		//result = (ADCH<<8)|ADCL; 8 bits from ADCL + 2 bits from ADCH
		binary_weighted_voltage_low = ADCL;
  60:	84 b1       	in	r24, 0x04	; 4
  62:	28 2f       	mov	r18, r24
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <binary_weighted_voltage_low+0x1>
  6a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <binary_weighted_voltage_low>
		binary_weighted_voltage_high = ((unsigned int)(ADCH << 8));
  6e:	95 b1       	in	r25, 0x05	; 5
  70:	89 2f       	mov	r24, r25
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	98 2f       	mov	r25, r24
  76:	88 27       	eor	r24, r24
  78:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <binary_weighted_voltage_high+0x1>
  7c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <binary_weighted_voltage_high>
		analogResult = binary_weighted_voltage_low | binary_weighted_voltage_high;
  80:	82 2b       	or	r24, r18
  82:	93 2b       	or	r25, r19
  84:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  88:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		//VCC = 4.8V - 1 unit = 4.6875 mV
		if(analogResult<=410) //de 0-2.0V
  8c:	8b 39       	cpi	r24, 0x9B	; 155
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	92 07       	cpc	r25, r18
  92:	70 f4       	brcc	.+28     	; 0xb0 <main+0x68>
		{
			PORTB|=(1<<PORTB3); // turn yellow led on
  94:	c3 9a       	sbi	0x18, 3	; 24
			PORTB&=~((1<<PORTB6)|(1<<PORTB4)); // turn green led off
  96:	88 b3       	in	r24, 0x18	; 24
  98:	8f 7a       	andi	r24, 0xAF	; 175
  9a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e7       	ldi	r24, 0x7F	; 127
  9e:	9a e1       	ldi	r25, 0x1A	; 26
  a0:	26 e0       	ldi	r18, 0x06	; 6
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	20 40       	sbci	r18, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x5a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x64>
  ac:	00 00       	nop
  ae:	d5 cf       	rjmp	.-86     	; 0x5a <main+0x12>
			_delay_ms(100);
		}
		else if(analogResult>=839) //4.1
  b0:	87 34       	cpi	r24, 0x47	; 71
  b2:	93 40       	sbci	r25, 0x03	; 3
  b4:	70 f0       	brcs	.+28     	; 0xd2 <main+0x8a>
		{
			PORTB&=~((1<<PORTB3)|(1<<PORTB4));
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	87 7e       	andi	r24, 0xE7	; 231
  ba:	88 bb       	out	0x18, r24	; 24
			PORTB|=(1<<PORTB6);
  bc:	c6 9a       	sbi	0x18, 6	; 24
  be:	8f e7       	ldi	r24, 0x7F	; 127
  c0:	9a e1       	ldi	r25, 0x1A	; 26
  c2:	26 e0       	ldi	r18, 0x06	; 6
  c4:	81 50       	subi	r24, 0x01	; 1
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	20 40       	sbci	r18, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x7c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x86>
  ce:	00 00       	nop
  d0:	c4 cf       	rjmp	.-120    	; 0x5a <main+0x12>
			_delay_ms(100);
		}
		else
		{
			PORTB &=~((1<<PORTB6)|(1<<PORTB3));
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	87 7b       	andi	r24, 0xB7	; 183
  d6:	88 bb       	out	0x18, r24	; 24
			PORTB|=(1<<PORTB4);
  d8:	c4 9a       	sbi	0x18, 4	; 24
  da:	bf cf       	rjmp	.-130    	; 0x5a <main+0x12>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
